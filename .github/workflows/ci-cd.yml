name: ci-cd

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  ci:
    name: CI - Test & Build
    runs-on: ubuntu-latest

    steps:
      # 1) Check out source code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Set up Node (adjust version for your stack)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # 3) Install dependencies
      - name: Install deps
        run: npm ci

      # 4) Run tests
      - name: Test
        run: npm test

      # 5) Build (compilation/bundling if applicable)
      - name: Build
        run: npm run build

  cd:
    name: CD - Docker Build & Push (main only)
    needs: ci
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # 1) Check out source code again for this job
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Set up Docker Buildx (better caching/multi-platform)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Log in to Docker Hub (use GitHub Secrets)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4) Compute tags (latest + short SHA)
      - name: Set image tags
        id: vars
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "IMAGE=your-dockerhub-username/hello-ci-cd" >> $GITHUB_OUTPUT
          echo "TAGS=type=raw,value=latest|type=raw,value=$SHORT_SHA" >> $GITHUB_OUTPUT

      # 5) Build and push the image
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.vars.outputs.IMAGE }}:latest
            ${{ steps.vars.outputs.IMAGE }}:${{ github.sha }}
          # optional build cache:
          cache-from: type=gha
          cache-to: type=gha,mode=max
